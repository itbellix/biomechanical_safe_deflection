#!/usr/bin/env python
PACKAGE = "safe_deflection_package"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# create a boolean button to stop the execution of the task
gen.add("execute_program", bool_t, 0, "Parameter to stop execution",  True)


# create menu for selecting which task is to be executed next
enum_tasks = gen.enum([gen.const("PleaseSelectTask", int_t, 0, "Doing nothing"),
                       gen.const("ApproachStartingPose", int_t, 1, "Approach the pose for therapy to start"),
                       gen.const("reStartTherapy", int_t, 2, "Start following commanded references"),
                       gen.const("PauseMovement", int_t, 3, "Pause the movement of the robot, keep current pose"),
                       gen.const("TransparentMode", int_t, 4, "Set 0 stiffness and damping for CIC"),
                       gen.const("RunTests", int_t, 5, "Select this to run some testing scripts") ], "List of tasks")

gen.add("task", int_t, 0, "Task to execute", 0, 0, 5, edit_method = enum_tasks)


# here we select the interaction mode for the HRI
enum_modes = gen.enum([gen.const("HoldCurrentPose", int_t, 0, "Track current pose"), 
                       gen.const("ReactUnsafeMovement_stiff", int_t, 1, "Monitor movement with unsafe zones (1)"),
                       gen.const("ReactUnsafeMovement_damp", int_t, 2, "Monitor movement with unsafe zones (2)"),
                       gen.const("PredictUnsafeMovement", int_t, 3, "Predictive deflection") ], "List of interaction modes")

gen.add("interaction_mode", int_t, 0, "Interaction mode", 0, 0, 3, edit_method = enum_modes)


# the following parameters can be used to personalize the setup 
# to any participant (NOTE: torso orientation is still fixed)
subjectgroup = gen.add_group("Subject characteristics", state = True)
subjectgroup.add("l_arm", double_t, 0, "Length of upper arm", 0.32, 0.2,   0.5)
subjectgroup.add("p_gh_in_base_x", double_t, 0, "Position GH in robot base [x]", -0.9, -1.4, -0.4)
subjectgroup.add("p_gh_in_base_y", double_t, 0, "Position GH in robot base [y]", 0, -0.4, 0.4)
subjectgroup.add("p_gh_in_base_z", double_t, 0, "Position GH in robot base [z]", 0.62, 0.4, 0.8)


# here we take care of modifying the control parameters
controlgroup = gen.add_group("Control parameters", state = True)
cg_robotInCharge = controlgroup.add_group("to avoid zones", state = True)
cg_robotInCharge.add("ee_trans_stiff_h", double_t, 0, "Cartesian translational stiff (high)", 400, 0, 600)
cg_robotInCharge.add("ee_rot_stiff_xy_h", double_t, 0, "Cartesian rotational stiff (high)", 15, 0, 30)
cg_robotInCharge.add("ee_rot_stiff_z_h", double_t, 0, "Cartesian rotational stiff (high)", 5, 0, 10)

cg_humanInCharge = controlgroup.add_group("to move freely", state = True)
cg_humanInCharge.add("ee_trans_stiff_l", double_t, 0, "Cartesian translational stiff (low)", 20, 0, 200)
cg_humanInCharge.add("ee_rot_stiff_xy_l", double_t, 0, "Cartesian rotational stiff (low)", 5, 0, 15)
cg_humanInCharge.add("ee_rot_stiff_z_l", double_t, 0, "Cartesian rotational stiff (low)", 1, 0, 5)
cg_humanInCharge.add("damp_ratio", double_t, 0, "With respect to Critical Damping", 2, 1, 8)


# here we update parameters for the test unsafe zone
zonegroup = gen.add_group("Zone tuning", state = True)
zonegroup.add("amplitude", double_t, 0, "Maximum amplitude for the Gaussian approximator", 4, 0, 8)
zonegroup.add("x0", double_t, 0, "Center unsafe zone (PE)", 20, -20, 160)
zonegroup.add("y0", double_t, 0, "Center unsafe zone (SE)", 90, 0, 144)
zonegroup.add("sigma_x", double_t, 0, "Stand. Dev. along PE", 35, 1, 50)
zonegroup.add("sigma_y", double_t, 0, "Stand. Dev. along SE", 25, 1, 50)
zonegroup.add("strain_offset", double_t, 0, "Strain offset for the Gaussian approximator", 0, 0, 6)
zonegroup.add("strain_threshold", double_t, 0, "Strain [%] threshold for 'risky zone'", 2, 0, 5)

exit(gen.generate(PACKAGE, "safe_deflection_package", "ParameterUpdate"))
